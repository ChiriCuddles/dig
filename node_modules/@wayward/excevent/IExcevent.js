var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define(["require", "exports", "./PriorityMap"], function (require, exports, PriorityMap_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IEventSubscriber = exports.SYMBOL_SUBSCRIBER_INSTANCES = exports.SYMBOL_SUBSCRIBER_SET_CLASS = exports.SYMBOL_SUBSCRIPTION_REGISTRATIONS = exports.SYMBOL_SUBSCRIPTION_PROPERTY_REGISTRATIONS = exports.IEventHostInternal = exports.SYMBOL_EVENT_BUS_SUBSCRIPTIONS = exports.SYMBOL_SUBSCRIPTIONS_SET_CLASS = exports.SYMBOL_SUBSCRIPTIONS = exports.EventSubscriptions = void 0;
    PriorityMap_1 = __importDefault(PriorityMap_1);
    var EventSubscriptions;
    (function (EventSubscriptions) {
        function get(subscriptions, event, create = true) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            let subscriptionsByEvent = subscriptions[event];
            if (!subscriptionsByEvent && create)
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
                subscriptionsByEvent = subscriptions[event] = new PriorityMap_1.default();
            return subscriptionsByEvent;
        }
        EventSubscriptions.get = get;
        function getPriority(handlers, priority) {
            let result = handlers.get(priority);
            if (result)
                return result;
            handlers.set(result = {
                handlers: new Set(),
                references: {},
            }, priority);
            return result;
        }
        EventSubscriptions.getPriority = getPriority;
    })(EventSubscriptions = exports.EventSubscriptions || (exports.EventSubscriptions = {}));
    exports.SYMBOL_SUBSCRIPTIONS = Symbol("EXCEVENT_SUBSCRIPTIONS");
    exports.SYMBOL_SUBSCRIPTIONS_SET_CLASS = Symbol("EXCEVENT_SUBSCRIPTIONS_SET_CLASS");
    exports.SYMBOL_EVENT_BUS_SUBSCRIPTIONS = Symbol("EXCEVENT_EVENT_BUS_SUBSCRIPTIONS");
    var IEventHostInternal;
    (function (IEventHostInternal) {
        function getSubscriptions(host) {
            const h = getHost(host);
            const subscriptions = [h[exports.SYMBOL_SUBSCRIPTIONS], ...Object.values(h[exports.SYMBOL_EVENT_BUS_SUBSCRIPTIONS])];
            if ("event" in host)
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                return [...subscriptions, ...getSubscriptions(host.constructor)];
            return subscriptions;
        }
        IEventHostInternal.getSubscriptions = getSubscriptions;
        function getHost(host) {
            const h = host;
            if (h && h[exports.SYMBOL_SUBSCRIPTIONS_SET_CLASS] !== h) {
                h[exports.SYMBOL_SUBSCRIPTIONS] = {};
                h[exports.SYMBOL_SUBSCRIPTIONS_SET_CLASS] = h;
                h[exports.SYMBOL_EVENT_BUS_SUBSCRIPTIONS] = {};
            }
            return h;
        }
        IEventHostInternal.getHost = getHost;
    })(IEventHostInternal = exports.IEventHostInternal || (exports.IEventHostInternal = {}));
    exports.SYMBOL_SUBSCRIPTION_PROPERTY_REGISTRATIONS = Symbol("EXCEVENT_SUBSCRIBER_SUBSCRIPTION_PROPERTY_REGISTRATIONS");
    exports.SYMBOL_SUBSCRIPTION_REGISTRATIONS = Symbol("EXCEVENT_SUBSCRIBER_SUBSCRIPTION_REGISTRATIONS");
    exports.SYMBOL_SUBSCRIBER_SET_CLASS = Symbol("EXCEVENT_SUBSCRIBER_SET_CLASS");
    exports.SYMBOL_SUBSCRIBER_INSTANCES = Symbol("EXCEVENT_SUBSCRIBER_INSTANCES");
    var IEventSubscriber;
    (function (IEventSubscriber) {
        function getRegisteredPropertySubscriptions(cls) {
            if (!cls)
                return [];
            const s = cls;
            const subscriptions = s[exports.SYMBOL_SUBSCRIPTION_PROPERTY_REGISTRATIONS];
            const result = subscriptions === undefined ? [] : [subscriptions];
            if (typeof cls === "function")
                result.push(...getRegisteredPropertySubscriptions(Object.getPrototypeOf(cls)));
            return result;
        }
        IEventSubscriber.getRegisteredPropertySubscriptions = getRegisteredPropertySubscriptions;
        function getRegisteredSubscriptions(cls) {
            if (!cls)
                return [];
            const s = cls;
            const subscriptions = s[exports.SYMBOL_SUBSCRIPTION_REGISTRATIONS];
            const result = subscriptions === undefined ? [] : [subscriptions];
            if (typeof cls === "function")
                result.push(...getRegisteredSubscriptions(Object.getPrototypeOf(cls)));
            return result;
        }
        IEventSubscriber.getRegisteredSubscriptions = getRegisteredSubscriptions;
        function getSubscriber(subscriber) {
            var _a, _b;
            const s = subscriber;
            if (s) {
                if (typeof subscriber === "function") {
                    if (s[exports.SYMBOL_SUBSCRIBER_SET_CLASS] !== s) {
                        s[exports.SYMBOL_SUBSCRIPTION_PROPERTY_REGISTRATIONS] = {};
                        s[exports.SYMBOL_SUBSCRIPTION_REGISTRATIONS] = new Map();
                        s[exports.SYMBOL_SUBSCRIBER_SET_CLASS] = s;
                        s[exports.SYMBOL_SUBSCRIBER_INSTANCES] = new Set();
                    }
                }
                else {
                    (_a = s[exports.SYMBOL_SUBSCRIPTION_PROPERTY_REGISTRATIONS]) !== null && _a !== void 0 ? _a : (s[exports.SYMBOL_SUBSCRIPTION_PROPERTY_REGISTRATIONS] = {});
                    (_b = s[exports.SYMBOL_SUBSCRIPTION_REGISTRATIONS]) !== null && _b !== void 0 ? _b : (s[exports.SYMBOL_SUBSCRIPTION_REGISTRATIONS] = new Map());
                }
            }
            return s;
        }
        IEventSubscriber.getSubscriber = getSubscriber;
        function addInstance(subscriber, instance) {
            const instances = subscriber[exports.SYMBOL_SUBSCRIBER_INSTANCES];
            if (instances) {
                if (instances.has(instance))
                    return false;
                instances.add(instance);
            }
            if (typeof subscriber === "function")
                addInstance(Object.getPrototypeOf(subscriber), instance);
            return true;
        }
        IEventSubscriber.addInstance = addInstance;
        function removeInstance(subscriber, instance) {
            const instances = subscriber[exports.SYMBOL_SUBSCRIBER_INSTANCES];
            if (instances) {
                if (!instances.has(instance))
                    return false;
                instances.delete(instance);
            }
            if (typeof subscriber === "function")
                removeInstance(Object.getPrototypeOf(subscriber), instance);
            return true;
        }
        IEventSubscriber.removeInstance = removeInstance;
    })(IEventSubscriber = exports.IEventSubscriber || (exports.IEventSubscriber = {}));
});
