import Excevent from "./Excevent";
import { Class, EventBusOrHost, EventHandler, EventList, EventParameters, EventReturn, Events, EventUnion, HostInstance, TypedPropertyDescriptorFunctionAnyNOfParams } from "./IExcevent";
declare type CoerceVoidToUndefined<T> = T extends void ? undefined : T;
export declare type EventOutput<EVENTS, EVENT extends keyof EVENTS> = CoerceVoidToUndefined<EventReturn<EVENTS, EVENT>>;
export declare type EventOutputEnsured<EVENTS, EVENT extends keyof EVENTS> = Exclude<EventOutput<EVENTS, EVENT>, undefined>;
export interface IEventQueryBuilder<EVENTS, EVENT extends keyof EVENTS> {
    where: (predicate: (output: EventOutputEnsured<EVENTS, EVENT>) => any) => this;
    get: (predicate?: ((output: EventOutputEnsured<EVENTS, EVENT>) => any) | undefined) => EventOutput<EVENTS, EVENT> | undefined;
}
export default class EventEmitter<HOST, EVENTS, BUSES = null> {
    private readonly host;
    private excevent?;
    private subscriptions;
    constructor(host: HOST, excevent?: Excevent<BUSES> | undefined);
    emit<EVENT extends keyof EVENTS>(event: EVENT, ...args: EventParameters<EVENTS, EVENT>): any[];
    query<EVENT extends keyof EVENTS>(event: EVENT, ...args: EventParameters<EVENTS, EVENT>): IEventQueryBuilder<EVENTS, EVENT>;
    subscribe<EVENT extends EventList<EVENTS>>(events: EVENT, ...handlers: EventHandler<HOST, EVENTS, EventUnion<EVENTS, EVENT>>[]): HOST;
    subscribe<EVENT extends EventList<EVENTS>>(events: EVENT, priority: number, ...handlers: EventHandler<HOST, EVENTS, EventUnion<EVENTS, EVENT>>[]): HOST;
    unsubscribe<EVENT extends EventList<EVENTS>>(events: EVENT, ...handlers: EventHandler<HOST, EVENTS, EventUnion<EVENTS, EVENT>>[]): HOST;
    unsubscribe<EVENT extends EventList<EVENTS>>(events: EVENT, priority: number, ...handlers: EventHandler<HOST, EVENTS, EventUnion<EVENTS, EVENT>>[]): HOST;
    /**
     * Returns a promise that will be resolved when any of the given events are emitted on this object.
     * @param events The events to resolve the promise on.
     * @param priority The priority of waiting for the given events, compared to other event handlers. Defaults to `-Infinity`
     */
    waitFor<EVENT extends EventList<EVENTS>>(events: EVENT, priority?: number): Promise<Parameters<Extract<EVENTS[EventUnion<EVENTS, EVENT>], (...args: any[]) => any>>>;
    until<EVENT extends EventList<EVENTS>>(event: EVENT, initializer: (subscriber: IUntilThisSubscriber<BUSES>) => any): HOST;
    until<UNTIL_HOST extends (BUSES extends null ? never : EventBusOrHost<any>), UNTIL_EVENTS extends Events<UNTIL_HOST, BUSES>, EVENT extends EventList<UNTIL_EVENTS>>(host: UNTIL_HOST, event: EVENT, initializer: (subscriber: IUntilSubscriber<HOST, EVENTS>) => any): HOST;
    private getHandlerLists;
    private createApi;
}
interface IEventHost<EVENTS, BUSES = null> {
    event: EventEmitter<this, EVENTS, BUSES>;
}
interface IEventHostClass<BUSES = null> {
    new <EVENTS>(): IEventHost<EVENTS, BUSES>;
}
export declare function EventHost<BUSES = null>(excevent?: Excevent<BUSES>): IEventHostClass<BUSES>;
export declare namespace EventHost {
    function Handler<HOST, EVENT extends keyof Events<HOST>>(host: Class<HOST>, event: EVENT, priority?: number): <HOST>(host: HOST, property2: string | number, descriptor: EVENT extends keyof Events<HOST> ? TypedPropertyDescriptorFunctionAnyNOfParams<EventHandler<HostInstance<HOST>, Events<HOST>, EVENT>> : never) => void;
    function Handler<EVENT extends string>(event: EVENT, priority?: number): <HOST>(host: HOST, property2: string | number, descriptor: EVENT extends keyof Events<HOST> ? TypedPropertyDescriptorFunctionAnyNOfParams<EventHandler<HostInstance<HOST>, Events<HOST>, EVENT>> : never) => void;
}
export interface IUntilSubscriber<HOST, EVENTS> {
    subscribe<EVENT extends EventList<EVENTS>>(events: EVENT, ...handlers: EventHandler<HOST, EVENTS, EventUnion<EVENTS, EVENT>>[]): this;
    subscribe<EVENT extends EventList<EVENTS>>(events: EVENT, priority: number, ...handlers: EventHandler<HOST, EVENTS, EventUnion<EVENTS, EVENT>>[]): this;
}
export interface IUntilThisSubscriber<BUSES> {
    subscribe<HOST, EVENTS extends Events<HOST, BUSES>, EVENT extends EventList<EVENTS>>(host: HOST, events: EVENT, ...handlers: EventHandler<HOST, EVENTS, EventUnion<EVENTS, EVENT>>[]): this;
    subscribe<HOST, EVENTS extends Events<HOST, BUSES>, EVENT extends EventList<EVENTS>>(host: HOST, events: EVENT, priority: number, ...handlers: EventHandler<HOST, EVENTS, EventUnion<EVENTS, EVENT>>[]): this;
}
export {};
