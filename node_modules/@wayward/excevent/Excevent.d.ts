import { Class, EventBusOrHost, EventHandler, EventList, Events, EventUnion, Host, HostInstance, TypedPropertyDescriptorFunctionAnyNOfParams } from "./IExcevent";
export declare class GlobalEventSubscriber<BUSES> {
    private readonly excevent;
    constructor(excevent: Excevent<BUSES>);
    hasRegistrations(): boolean;
    register<HOST, EVENTS extends Events<HOST, BUSES>, EVENT extends EventList<EVENTS>>(host: HOST, events: EVENT, ...handlers: EventHandler<HOST, EVENTS, EventUnion<EVENTS, EVENT>>[]): this;
    register<HOST, EVENTS extends Events<HOST, BUSES>, EVENT extends EventList<EVENTS>>(host: HOST, events: EVENT, priority: number, ...handlers: EventHandler<HOST, EVENTS, EventUnion<EVENTS, EVENT>>[]): this;
    subscribe(): this;
    unsubscribe(): this;
}
export default class Excevent<BUSES> {
    private buses;
    createSubscriber(): GlobalEventSubscriber<BUSES>;
    subscribe(instance: any): void;
    unsubscribe(instance: any): void;
    registerBus<BUS extends keyof BUSES>(bus: BUS, host: BUSES[BUS]): void;
    private getBus;
    deregisterBus<BUS extends keyof BUSES>(bus: BUS): void;
    /**
     * A decorator for event handler methods
     * @param on What event source to subscribe to
     * @param event The event to subscribe to
     * @param priority The priority of this handler compared to other handlers of the same event
     */
    Handler<ON extends EventBusOrHost<BUSES>, EVENT extends keyof Events<ON, BUSES>>(on: ON, event: EVENT, priority?: number): (host: any, property2: string | number, descriptor: TypedPropertyDescriptorFunctionAnyNOfParams<EventHandler<HostInstance<Host<ON, BUSES>>, Events<ON, BUSES>>>) => void;
    /**
     * A decorator for classes that should emit events to an event bus
     * @param bus The bus to emit events to
     */
    Bus<BUS extends keyof BUSES>(bus: BUS): (constructor: BUSES[BUS] extends Class<any> ? BUSES[BUS] : never) => void;
    /**
     * A decorator for classes that should automatically subscribe any registered event handlers in their instances
     */
    Subscribe: <CLASS extends Class<any>>(constructor: CLASS) => CLASS;
}
