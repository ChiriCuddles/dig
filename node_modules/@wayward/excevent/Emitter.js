/* eslint-disable @typescript-eslint/no-unsafe-return */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define(["require", "exports", "./IExcevent", "./PriorityMap"], function (require, exports, IExcevent_1, PriorityMap_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventHost = void 0;
    PriorityMap_1 = __importDefault(PriorityMap_1);
    const SYMBOL_OWN_SUBSCRIPTIONS = Symbol("EXCEVENT_OWN_SUBSCRIPTIONS");
    const SYMBOL_OWN_SET_CLASS = Symbol("EXCEVENT_OWN_SET_CLASS");
    class EventEmitter {
        // @ts-ignore
        constructor(host, excevent) {
            var _a;
            this.host = host;
            this.excevent = excevent;
            this.subscriptions = {};
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            const cls = host.constructor;
            for (const [event, property, priority] of (_a = cls[SYMBOL_OWN_SUBSCRIPTIONS]) !== null && _a !== void 0 ? _a : []) {
                const subscriptions = IExcevent_1.EventSubscriptions.get(this.subscriptions, event);
                const subscribedReferences = IExcevent_1.EventSubscriptions.getPriority(subscriptions, priority).references;
                let subscribedInProperty = subscribedReferences[property];
                if (!subscribedInProperty)
                    subscribedInProperty = subscribedReferences[property] = new Set();
                subscribedInProperty.add(host);
            }
        }
        emit(event, ...args) {
            const handlersByPriority = this.getHandlerLists(event);
            if (handlersByPriority.length === 0)
                return [];
            const api = this.createApi(event);
            return PriorityMap_1.default.mapAll(handlersByPriority, (api, handlersByType) => {
                const mutableApi = api;
                const result = [];
                for (const handler of handlersByType.handlers) {
                    mutableApi.index++;
                    const handlerOutput = handler(api, ...args);
                    if (!api.disregard)
                        result.push(handlerOutput);
                    if (api.break)
                        return result;
                }
                for (const [property, subscribers] of Object.entries(handlersByType.references)) {
                    for (const subscriber of subscribers) {
                        mutableApi.index++;
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
                        const handlerOutput = subscriber[property](api, ...args);
                        if (!api.disregard)
                            result.push(handlerOutput);
                        if (api.break)
                            return result;
                    }
                }
                return result;
            }, api)
                .flat();
        }
        query(event, ...args) {
            const predicates = [];
            return {
                where(predicate) {
                    predicates.push(predicate);
                    return this;
                },
                get: (predicate) => {
                    const handlersByPriority = this.getHandlerLists(event);
                    if (handlersByPriority.length === 0)
                        return undefined;
                    if (predicate)
                        predicates.push(predicate);
                    const api = this.createApi(event);
                    let result;
                    PriorityMap_1.default.mapAll(handlersByPriority, (api, handlersByType) => {
                        const mutableApi = api;
                        NextHandler: for (const handler of handlersByType.handlers) {
                            mutableApi.index++;
                            const output = handler(api, ...args);
                            if (output !== undefined && !api.disregard) {
                                for (const predicate of predicates)
                                    if (!predicate(output))
                                        continue NextHandler;
                                api.break = true;
                                result = output;
                                return;
                            }
                        }
                        for (const [property, subscribers] of Object.entries(handlersByType.references)) {
                            NextSubscriber: for (const subscriber of subscribers) {
                                mutableApi.index++;
                                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
                                const output = subscriber[property](api, ...args);
                                if (output !== undefined && !api.disregard) {
                                    for (const predicate of predicates)
                                        if (!predicate(output))
                                            continue NextSubscriber;
                                    api.break = true;
                                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                                    result = output;
                                    return;
                                }
                            }
                        }
                    }, api);
                    return result;
                },
            };
        }
        subscribe(events, priority, ...handlers) {
            if (typeof priority !== "number") {
                if (priority !== undefined) {
                    handlers.push(priority);
                }
                priority = 0;
            }
            for (const event of Array.isArray(events) ? events : [events]) {
                const subscriptions = IExcevent_1.EventSubscriptions.get(this.subscriptions, event);
                const subscribedHandlers = IExcevent_1.EventSubscriptions.getPriority(subscriptions, priority).handlers;
                for (const handler of handlers)
                    subscribedHandlers.add(handler);
            }
            return this.host;
        }
        unsubscribe(events, priority, ...handlers) {
            var _a;
            if (typeof priority !== "number") {
                if (priority !== undefined) {
                    handlers.push(priority);
                }
                priority = 0;
            }
            for (const event of Array.isArray(events) ? events : [events]) {
                const subscriptions = IExcevent_1.EventSubscriptions.get(this.subscriptions, event, false);
                const subscribedHandlers = (_a = subscriptions === null || subscriptions === void 0 ? void 0 : subscriptions.get(priority)) === null || _a === void 0 ? void 0 : _a.handlers;
                if (subscribedHandlers)
                    for (const handler of handlers)
                        subscribedHandlers.delete(handler);
            }
            return this.host;
        }
        /**
         * Returns a promise that will be resolved when any of the given events are emitted on this object.
         * @param events The events to resolve the promise on.
         * @param priority The priority of waiting for the given events, compared to other event handlers. Defaults to `-Infinity`
         */
        async waitFor(events, priority = -Infinity) {
            return new Promise(resolve => {
                const realHandler = (api, ...args) => {
                    this.unsubscribe(events, priority, realHandler);
                    resolve(args);
                    api.disregard = true;
                };
                this.subscribe(events, priority, realHandler);
            });
        }
        until(host, event, initializer) {
            var _a;
            if (typeof event === "function") {
                initializer = event;
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                event = host;
                host = undefined;
                const subscriber = (_a = this.excevent) === null || _a === void 0 ? void 0 : _a.createSubscriber();
                const subscriptions = [];
                const untilSubscriber = {
                    subscribe: (host, event, priority, ...handlers) => {
                        if (typeof priority !== "number") {
                            if (priority !== undefined) {
                                handlers.push(priority);
                            }
                            priority = 0;
                        }
                        if (typeof host === "object" && "event" in host) {
                            subscriptions.push([host, event, priority, ...handlers]);
                        }
                        else {
                            if (subscriber)
                                subscriber.register(host, event, priority, ...handlers);
                            else
                                console.warn("Emitter", this, "has no reference to an Excevent instance, cannot use 'until' for event:", event, "on:", host);
                        }
                        return untilSubscriber;
                    },
                };
                initializer(untilSubscriber);
                if (subscriptions.length > 0 || (subscriber === null || subscriber === void 0 ? void 0 : subscriber.hasRegistrations())) {
                    for (const [host, event, priority, ...handlers] of subscriptions) {
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                        if ("event" in host && host.event instanceof EventEmitter) {
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
                            host.event.subscribe(event, priority, ...handlers);
                        }
                    }
                    const unsubscribe = (api, _) => {
                        // unsubscribe
                        for (const [host, event, priority, ...handlers] of subscriptions) {
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                            if ("event" in host && host.event instanceof EventEmitter) {
                                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
                                host.event.unsubscribe(event, priority, ...handlers);
                            }
                        }
                        subscriber === null || subscriber === void 0 ? void 0 : subscriber.unsubscribe();
                        this.unsubscribe(event, -Infinity, unsubscribe);
                        api.disregard = true;
                    };
                    subscriber === null || subscriber === void 0 ? void 0 : subscriber.subscribe();
                    this.subscribe(event, -Infinity, unsubscribe);
                }
                return this;
            }
            const subscriptions = [];
            const untilSubscriber = {
                subscribe: (event, priority, ...handlers) => {
                    if (typeof priority !== "number") {
                        if (priority !== undefined) {
                            handlers.push(priority);
                        }
                        priority = 0;
                    }
                    subscriptions.push([event, priority, ...handlers]);
                    return untilSubscriber;
                },
            };
            initializer(untilSubscriber);
            if (subscriptions.length > 0) {
                if (this.excevent === undefined) {
                    console.warn("Emitter", this, "has no reference to an Excevent instance, cannot use 'until' for event:", event, "on:", host);
                    return this;
                }
                for (const [event, priority, ...handlers] of subscriptions)
                    this.subscribe(event, priority, ...handlers);
                const subscriber = this.excevent.createSubscriber()
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
                    .register(host, event, -Infinity, (api, _) => {
                    // unsubscribe
                    subscriber.unsubscribe();
                    for (const [event, priority, ...handlers] of subscriptions)
                        this.unsubscribe(event, priority, ...handlers);
                    api.disregard = true;
                })
                    .subscribe();
            }
            return this.host;
        }
        getHandlerLists(event) {
            const subscriptions = this.subscriptions[event];
            const emitTo = subscriptions === undefined ? [] : [subscriptions];
            for (const { [event]: otherSubscriptionsOfEvent } of IExcevent_1.IEventHostInternal.getSubscriptions(this.host))
                if (otherSubscriptionsOfEvent)
                    emitTo.push(otherSubscriptionsOfEvent);
            return emitTo;
        }
        createApi(event) {
            return {
                host: this.host,
                event,
                index: -1,
                break: false,
                disregard: false,
            };
        }
    }
    exports.default = EventEmitter;
    function EventHost(excevent) {
        return class {
            constructor() {
                this.event = new EventEmitter(this, excevent);
            }
        };
    }
    exports.EventHost = EventHost;
    (function (EventHost) {
        function Handler(host, event, priority) {
            if (typeof host === "string") {
                priority = event;
                event = host;
            }
            priority !== null && priority !== void 0 ? priority : (priority = 0);
            return (subscriber, property, descriptor) => {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                const cls = subscriber.constructor;
                let registeredOwnHandlers = cls[SYMBOL_OWN_SUBSCRIPTIONS];
                if (!registeredOwnHandlers || cls[SYMBOL_OWN_SET_CLASS] !== cls) {
                    registeredOwnHandlers = cls[SYMBOL_OWN_SUBSCRIPTIONS] = [];
                    cls[SYMBOL_OWN_SET_CLASS] = cls;
                }
                registeredOwnHandlers.push([event, property, priority]);
            };
        }
        EventHost.Handler = Handler;
    })(EventHost = exports.EventHost || (exports.EventHost = {}));
});
