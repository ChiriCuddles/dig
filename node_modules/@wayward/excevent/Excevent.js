var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define(["require", "exports", "./IExcevent", "./PriorityMap"], function (require, exports, IExcevent_1, PriorityMap_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GlobalEventSubscriber = void 0;
    PriorityMap_1 = __importDefault(PriorityMap_1);
    function isEmpty(obj) {
        for (const _ in obj)
            return false;
        return true;
    }
    class GlobalEventSubscriber {
        constructor(excevent) {
            this.excevent = excevent;
        }
        hasRegistrations() {
            const subscriber = IExcevent_1.IEventSubscriber.getSubscriber(this);
            const subscriptions = subscriber[IExcevent_1.SYMBOL_SUBSCRIPTION_REGISTRATIONS];
            return subscriptions.size > 0;
        }
        register(host, events, priority, ...handlers) {
            if (typeof priority !== "number") {
                if (priority !== undefined) {
                    handlers.push(priority);
                }
                priority = 0;
            }
            for (const event of Array.isArray(events) ? events : [events])
                for (const handler of handlers)
                    registerHandler(this, handler, host, event, priority);
            return this;
        }
        subscribe() {
            this.excevent.subscribe(this);
            return this;
        }
        unsubscribe() {
            this.excevent.unsubscribe(this);
            return this;
        }
    }
    exports.GlobalEventSubscriber = GlobalEventSubscriber;
    class Excevent {
        constructor() {
            this.buses = {};
            /**
             * A decorator for classes that should automatically subscribe any registered event handlers in their instances
             */
            this.Subscribe = (constructor) => {
                // eslint-disable-next-line @typescript-eslint/no-this-alias
                const excevent = this;
                return class extends constructor {
                    constructor(...args) {
                        super(...args);
                        excevent.subscribe(this);
                    }
                };
            };
        }
        createSubscriber() {
            return new GlobalEventSubscriber(this);
        }
        subscribe(instance) {
            var _a, _b;
            if (!instance)
                return;
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            const cls = instance instanceof GlobalEventSubscriber ? instance : instance.constructor;
            const subscriber = IExcevent_1.IEventSubscriber.getSubscriber(cls);
            if (!IExcevent_1.IEventSubscriber.addInstance(subscriber, instance))
                return;
            const subscriptions = IExcevent_1.IEventSubscriber.getRegisteredPropertySubscriptions(cls);
            for (const subscriptionsByProperty of subscriptions) {
                for (const [property, subscriptionsByHost] of Object.entries(subscriptionsByProperty)) {
                    for (const [host, subscriptions] of subscriptionsByHost) {
                        let subscribeTo;
                        if (typeof host !== "object" && typeof host !== "function") {
                            // event bus
                            const bus = this.getBus(host);
                            subscribeTo = bus.subscriptions;
                        }
                        else {
                            // host class or host
                            const hostInternal = IExcevent_1.IEventHostInternal.getHost(host);
                            subscribeTo = hostInternal[IExcevent_1.SYMBOL_SUBSCRIPTIONS];
                        }
                        for (const [event, priorities] of Object.entries(subscriptions)) {
                            for (const priority of priorities) {
                                const subscriptions = IExcevent_1.EventSubscriptions.get(subscribeTo, event);
                                const subscribedReferences = IExcevent_1.EventSubscriptions.getPriority(subscriptions, +priority).references;
                                let subscribedInProperty = subscribedReferences[property];
                                if (!subscribedInProperty)
                                    subscribedInProperty = subscribedReferences[property] = new Set();
                                subscribedInProperty.add(instance);
                            }
                        }
                    }
                }
            }
            const handlerSubscriptions = IExcevent_1.IEventSubscriber.getRegisteredSubscriptions(cls);
            for (const subscriptionsByHost of handlerSubscriptions) {
                for (const [host, subscriptions] of subscriptionsByHost) {
                    let subscribeTo;
                    if (typeof host !== "object" && typeof host !== "function") {
                        // event bus
                        const bus = this.getBus(host);
                        subscribeTo = bus.subscriptions;
                    }
                    else {
                        // host class or host
                        const hostInternal = IExcevent_1.IEventHostInternal.getHost(host);
                        subscribeTo = hostInternal[IExcevent_1.SYMBOL_SUBSCRIPTIONS];
                    }
                    for (const [event, handlersByPriority] of Object.entries(subscriptions)) {
                        for (const priority of handlersByPriority.getPriorities()) {
                            for (const handler of (_b = (_a = handlersByPriority.get(priority)) === null || _a === void 0 ? void 0 : _a.handlers) !== null && _b !== void 0 ? _b : []) {
                                const subscriptions = IExcevent_1.EventSubscriptions.get(subscribeTo, event);
                                const subscribedHandlers = IExcevent_1.EventSubscriptions.getPriority(subscriptions, +priority).handlers;
                                subscribedHandlers.add(handler);
                            }
                        }
                    }
                }
            }
        }
        unsubscribe(instance) {
            var _a, _b;
            if (!instance)
                return;
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            const cls = instance instanceof GlobalEventSubscriber ? instance : instance.constructor;
            const subscriber = IExcevent_1.IEventSubscriber.getSubscriber(cls);
            if (!IExcevent_1.IEventSubscriber.removeInstance(subscriber, instance))
                return;
            const subscriptions = IExcevent_1.IEventSubscriber.getRegisteredPropertySubscriptions(cls);
            for (const subscriptionsByProperty of subscriptions) {
                for (const [property, subscriptionsByHost] of Object.entries(subscriptionsByProperty)) {
                    for (const [host, subscriptions] of subscriptionsByHost) {
                        let subscribeTo;
                        if (typeof host !== "object" && typeof host !== "function") {
                            // event bus
                            const bus = this.getBus(host);
                            subscribeTo = bus.subscriptions;
                        }
                        else {
                            // host class or host
                            const hostInternal = IExcevent_1.IEventHostInternal.getHost(host);
                            subscribeTo = hostInternal[IExcevent_1.SYMBOL_SUBSCRIPTIONS];
                        }
                        for (const [event, priorities] of Object.entries(subscriptions)) {
                            for (const priority of priorities) {
                                const subscriptionsByPriority = IExcevent_1.EventSubscriptions.get(subscribeTo, event, false);
                                const subscribed = subscriptionsByPriority === null || subscriptionsByPriority === void 0 ? void 0 : subscriptionsByPriority.get(+priority);
                                const subscribedReferences = subscribed === null || subscribed === void 0 ? void 0 : subscribed.references;
                                const subscribedInProperty = subscribedReferences === null || subscribedReferences === void 0 ? void 0 : subscribedReferences[property];
                                if (subscribedInProperty) {
                                    subscribedInProperty.delete(instance);
                                    if (subscribedInProperty.size === 0) {
                                        delete subscribedReferences[property];
                                        if (isEmpty(subscribedReferences)) {
                                            if (subscribed.handlers.size === 0) {
                                                subscriptionsByPriority.remove(+priority);
                                                if (!subscriptionsByPriority.hasAny()) {
                                                    delete subscribeTo[event];
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            const handlerSubscriptions = IExcevent_1.IEventSubscriber.getRegisteredSubscriptions(cls);
            for (const subscriptionsByHost of handlerSubscriptions) {
                for (const [host, subscriptions] of subscriptionsByHost) {
                    let subscribeTo;
                    if (typeof host !== "object" && typeof host !== "function") {
                        // event bus
                        const bus = this.getBus(host);
                        subscribeTo = bus.subscriptions;
                    }
                    else {
                        // host class or host
                        const hostInternal = IExcevent_1.IEventHostInternal.getHost(host);
                        subscribeTo = hostInternal[IExcevent_1.SYMBOL_SUBSCRIPTIONS];
                    }
                    for (const [event, handlersByPriority] of Object.entries(subscriptions)) {
                        for (const priority of handlersByPriority.getPriorities()) {
                            for (const handler of (_b = (_a = handlersByPriority.get(priority)) === null || _a === void 0 ? void 0 : _a.handlers) !== null && _b !== void 0 ? _b : []) {
                                const subscriptions = IExcevent_1.EventSubscriptions.get(subscribeTo, event);
                                const subscribedByType = subscriptions.get(+priority);
                                const subscribedHandlers = subscribedByType === null || subscribedByType === void 0 ? void 0 : subscribedByType.handlers;
                                subscribedHandlers === null || subscribedHandlers === void 0 ? void 0 : subscribedHandlers.delete(handler);
                                if ((subscribedHandlers === null || subscribedHandlers === void 0 ? void 0 : subscribedHandlers.size) === 0 && isEmpty(subscribedByType.references)) {
                                    subscriptions.remove(+priority);
                                    if (!subscriptions.hasAny()) {
                                        delete subscribeTo[event];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        registerBus(bus, host) {
            this.deregisterBus(bus);
            const h = IExcevent_1.IEventHostInternal.getHost(host);
            const registeredBus = this.getBus(bus);
            // the class needs to know that it's been assigned as this event bus
            h[IExcevent_1.SYMBOL_EVENT_BUS_SUBSCRIPTIONS][bus] = registeredBus.subscriptions;
        }
        getBus(bus) {
            let registeredBus = this.buses[bus];
            if (!registeredBus)
                registeredBus = this.buses[bus] = { subscriptions: {} };
            return registeredBus;
        }
        deregisterBus(bus) {
            var _a;
            const registeredBus = this.buses[bus];
            if (!registeredBus)
                return;
            (_a = registeredBus.host) === null || _a === void 0 ? true : delete _a[IExcevent_1.SYMBOL_EVENT_BUS_SUBSCRIPTIONS][bus];
        }
        /**
         * A decorator for event handler methods
         * @param on What event source to subscribe to
         * @param event The event to subscribe to
         * @param priority The priority of this handler compared to other handlers of the same event
         */
        Handler(on, event, priority = 0) {
            return (subscriberClass, property, descriptor) => {
                registerHandlerProperty(subscriberClass.constructor, property, on, event, priority);
            };
        }
        /**
         * A decorator for classes that should emit events to an event bus
         * @param bus The bus to emit events to
         */
        Bus(bus) {
            return (constructor) => {
                this.registerBus(bus, constructor);
            };
        }
    }
    exports.default = Excevent;
    function registerHandlerProperty(_subscriber, property, on, event, priority) {
        const subscriber = IExcevent_1.IEventSubscriber.getSubscriber(_subscriber);
        const subscriptions = subscriber[IExcevent_1.SYMBOL_SUBSCRIPTION_PROPERTY_REGISTRATIONS];
        let subscriptionsOfProperty = subscriptions[property];
        if (!subscriptionsOfProperty)
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            subscriptionsOfProperty = subscriptions[property] = new Map();
        let subscriptionsOfHost = subscriptionsOfProperty.get(on);
        if (!subscriptionsOfHost)
            subscriptionsOfProperty.set(on, subscriptionsOfHost = {});
        let priorities = subscriptionsOfHost[event];
        if (!priorities)
            priorities = subscriptionsOfHost[event] = new Set();
        priorities.add(priority);
    }
    function registerHandler(_subscriber, handler, on, event, priority) {
        const subscriber = IExcevent_1.IEventSubscriber.getSubscriber(_subscriber);
        const subscriptions = subscriber[IExcevent_1.SYMBOL_SUBSCRIPTION_REGISTRATIONS];
        let subscriptionsOfHost = subscriptions.get(on);
        if (!subscriptionsOfHost)
            subscriptions.set(on, subscriptionsOfHost = {});
        let subscriptionsByPriority = subscriptionsOfHost[event];
        if (!subscriptionsByPriority)
            subscriptionsByPriority = subscriptionsOfHost[event] = new PriorityMap_1.default();
        IExcevent_1.EventSubscriptions.getPriority(subscriptionsByPriority, priority)
            .handlers.add(handler);
    }
});
