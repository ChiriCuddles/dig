define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class PriorityMap {
        constructor() {
            this.internalMap = new Map();
            this.priorities = [];
        }
        static mapAll(lists, consumer, api = { break: false }) {
            const result = [];
            const indexedLists = lists
                .filter(map => map.hasAny())
                .map(map => ({ map, index: 0, done: false, priorities: map.priorities.slice() }));
            const listCount = indexedLists.length;
            if (listCount === 0)
                return result;
            let done = 0;
            while (true) {
                let highest;
                let highestPriority;
                for (const current of indexedLists) {
                    if (current.done)
                        continue;
                    const priority = current.priorities[current.index];
                    if (highestPriority === undefined || priority > highestPriority) {
                        highest = current;
                        highestPriority = priority;
                    }
                }
                const map = highest.map;
                if (highest.priorities.length === ++highest.index) {
                    highest.done = true;
                    done++;
                }
                const value = map.internalMap.get(highestPriority);
                if (value !== undefined) {
                    result.push(consumer(api, value));
                    if (api.break)
                        return result;
                }
                if (done === listCount)
                    break;
            }
            return result;
        }
        hasAny() {
            return this.priorities.length > 0;
        }
        get(priority = 0) {
            return this.internalMap.get(priority);
        }
        set(value, priority = 0) {
            if (!this.internalMap.has(priority))
                this.addPriority(priority);
            this.internalMap.set(priority, value);
            return this;
        }
        remove(priority = 0) {
            if (this.internalMap.delete(priority))
                this.deletePriority(priority);
            return this;
        }
        clear() {
            this.internalMap.clear();
            this.priorities.splice(0, Infinity);
            return this;
        }
        has(priority = 0) {
            return this.internalMap.has(priority);
        }
        map(consumer, api = { break: false }) {
            const result = [];
            for (const priority of this.priorities.slice()) {
                const value = this.internalMap.get(priority);
                if (value !== undefined) {
                    result.push(consumer(api, value));
                    if (api.break)
                        return result;
                }
            }
            return result;
        }
        getPriorities() {
            return this.priorities;
        }
        addPriority(priority) {
            const priorities = this.priorities;
            const sorted = sortedIndex(priorities, priority);
            priorities.splice(sorted, 0, priority);
        }
        deletePriority(priority) {
            const priorities = this.priorities;
            priorities.splice(sortedIndex(priorities, priority), 1);
        }
    }
    exports.default = PriorityMap;
    function sortedIndex(array, value) {
        let low = 0;
        let high = array.length;
        while (low < high) {
            const mid = (low + high) >>> 1;
            if (array[mid] > value)
                low = mid + 1;
            else
                high = mid;
        }
        return low;
    }
});
